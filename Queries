Descriptive Stats of Movies
Query: 		
SELECT		
	MIN(rental_duration) AS min_rental_duration, 	
	MAX(rental_duration) AS max_rental_duration,	
	AVG(rental_duration) AS avg_rental_duration,	
	MIN(rental_rate) AS min_rental_rate, 	
	MAX(rental_rate) AS max_rental_rate,	
	AVG(rental_rate) AS avg_rental_rate,	
	MIN(length) AS min_length,	
	MAX(length) AS max_length,	
	AVG(length) AS avg_length,	
	MIN(replacement_cost) AS min_replacement_cost,	
	MAX(replacement_cost) AS max_replacement_cost,	
	AVG(replacement_cost) AS avg_replacement_cost,	
	COUNT(*) AS count_records	


Total Revenue by Genre
Query: 			
SELECT A.name,			
		SUM(E.amount) AS total_revenue	
FROM category A			
INNER JOIN film_category B ON A.category_id = B.category_id			
INNER JOIN inventory C ON B.film_id = C.film_id			
INNER JOIN rental D ON C.inventory_id = D.inventory_id			
INNER JOIN payment E ON D.rental_id = E.rental_id			
			
GROUP BY A.name			
ORDER BY total_revenue DESC 			
			
Top 10 and Bottom 10 Movies in terms of Revenue
Query: 		
WITH temp AS		
(SELECT A.title,		
		F.name,
		SUM(D.amount) AS total_revenue
FROM film A		
INNER JOIN inventory B ON A.film_id = B.film_id		
INNER JOIN rental C ON B.inventory_id = C.inventory_id		
INNER JOIN payment D ON C.rental_id = D.rental_id 		
INNER JOIN film_category E ON A.film_id = E.film_id		
INNER JOIN category F ON E.category_id = F.category_id 		
		
GROUP BY title, F.name		
ORDER BY total_revenue DESC		
LIMIT 10), 		
		
bottom_10 AS 		
(SELECT A.title,		
		F.name,
		SUM(D.amount) AS total_revenue
FROM film A		
INNER JOIN inventory B ON A.film_id = B.film_id		
INNER JOIN rental C ON B.inventory_id = C.inventory_id		
INNER JOIN payment D ON C.rental_id = D.rental_id 		
INNER JOIN film_category E ON A.film_id = E.film_id		
INNER JOIN category F ON E.category_id = F.category_id 		
		
GROUP BY title, F.name		
ORDER BY total_revenue		
LIMIT 10)		
		
SELECT * FROM temp		
UNION		
SELECT * FROM bottom_10		
ORDER BY total_revenue DESC		

Highest Earning Films and their Replacement Costs
Query: 		
SELECT A.title,		
		A.replacement_cost,
		SUM(D.amount) AS total_revenue
FROM film A		
INNER JOIN inventory B ON A.film_id = B.film_id		
INNER JOIN rental C ON B.inventory_id = C.inventory_id		
INNER JOIN payment D ON C.rental_id = D.rental_id 		
		
GROUP BY title, replacement_cost		
ORDER BY total_revenue DESC 		


Lists number of customers and amount of total revenue by country
Query:
SELECT F.country, 		
		COUNT(distinct A.customer_id) AS total_customers,
		SUM(amount) AS total_revenue
FROM customer A		
INNER JOIN rental B ON A.customer_id = B.customer_id		
INNER JOIN payment C ON B.rental_id = C.rental_id		
INNER JOIN address D ON A.address_id = D.address_id		
INNER JOIN city E ON D.city_id = E.city_id		
INNER JOIN country F ON E.country_id = F.country_id		
		
GROUP BY country		
ORDER BY total_revenue DESC 		


Top 10 countries by number of customers and revenue
Query: 					
SELECT F.country, 					
		COUNT(distinct A.customer_id) AS total_customers,			
		SUM(amount) AS total_revenue			
FROM customer A					
INNER JOIN rental B ON A.customer_id = B.customer_id					
INNER JOIN payment C ON B.rental_id = C.rental_id					
INNER JOIN address D ON A.address_id = D.address_id					
INNER JOIN city E ON D.city_id = E.city_id					
INNER JOIN country F ON E.country_id = F.country_id					
					
GROUP BY country					
ORDER BY total_revenue DESC 					
LIMIT 10					

Top 5 customers in terms of total amount paid
Query: 				
SELECT CONCAT(B.first_name, ' ', B.last_name) AS cust_name, 				
		E.country,		
		D.city,		
		SUM(amount) AS total_amt_paid		
FROM payment A				
INNER JOIN customer B ON A.customer_id = B.customer_id				
INNER JOIN address C ON B.address_id = C.address_id				
INNER JOIN city D ON C.city_id = D.city_id				
INNER JOIN country E ON D.country_id = E.country_id				
GROUP BY cust_name, country, city 				
ORDER BY total_amt_paid DESC				
LIMIT 5				


